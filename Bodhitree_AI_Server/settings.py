"""
Django settings for Bodhitree_AI_Server project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Set the GPU device to be used (e.g., GPU 0)
os.environ["CUDA_VISIBLE_DEVICES"] = "0"  # Change to the desired GPU index
# DEVICE = "cuda:0"  # Specify the device for PyTorch and other GPU-based tasks
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xnstj&o4#8txn74%nmafo6xhc7a8si08k)7ifc5+v@3msp^g3q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '103.42.51.129',
    '10.10.13.63',
    '103.42.50.135',
    '103.42.50.107'

]


# Application definition

INSTALLED_APPS = [
    'django_celery_beat',
    'Datacollector',
    'TABuddy',
    'django_extensions',
    'django_prometheus',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Bodhitree_AI_Server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Bodhitree_AI_Server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



MONGODB_HOST = os.getenv('MONGODB_HOST', 'mongodb')
MONGODB_PORT = os.getenv('MONGODB_PORT', '27017')
MONGODB_NAME = os.getenv('MONGODB_DB', 'ai_bodhitree')


DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'ai_bodhitree',
        # 'NAME': MONGODB_NAME
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            # 'host': 'mongodb://root:example@localhost:27017/ai_bodhitree?authSource=admin',
            'host': 'mongodb://root:example@localhost:27017/'
            # 'host':'localhost',
            # 'port':27018,
            # 'username': 'root',
            # 'password': 'example',
            # 'authSource': 'admin'
        }
    }
}

CELERY_BROKER_URL = 'redis://localhost:6379/0'  # You can use RabbitMQ or Redis
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_ROUTES = {
    'Datacollector.tasks.*': {'queue': 'datacollector'},
    'TABuddy.tasks.*': {'queue': 'tabuddy'},
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

#Thershold data points for the model retraining
THRESHOLD_DATA_POINTS = os.getenv('THRESHOLD_DATA_POINTS', 1500)

# Model and Data Paths - All relative to BASE_DIR
MODEL_DIRECTORY_PATH = os.getenv('MODEL_DIRECTORY_PATH', str(BASE_DIR / 'base_models/CodeLlama-7b-Instruct-hf'))
ADAPTER_PATH = os.getenv('ADAPTER_PATH', str(BASE_DIR / 'TABuddy/utils/inference_model'))
DEVICE = os.getenv('DEVICE', 'cuda:0')
TESTDATASET_FILE_PATH = os.getenv('TESTDATASET_FILE_PATH', str(BASE_DIR / 'Datacollector/utils/test_dataset/test.jsonl'))

# MLflow and Model Configuration
MODEL_NAME = os.getenv('MODEL_NAME', 'CodeLlama-DPO')
EXPERIMENT_NAME = os.getenv('EXPERIMENT_NAME', 'Bodhitree_AI_retraining')
DOWNLOAD_PATH = os.getenv('DOWNLOAD_PATH', str(BASE_DIR / 'Datacollector/utils/Finetuned_models'))

# MLflow and S3 Configuration
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', 'root')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', 'root1234')
MLFLOW_S3_ENDPOINT_URL = os.getenv('MLFLOW_S3_ENDPOINT_URL', 'http://minio:9000')
TRACKING_URI = os.getenv('TRACKING_URI', 'http://mlflow:5000')

# Additional Paths
PRODUCTION_MODEL_PATH = os.getenv('PRODUCTION_MODEL_PATH', str(BASE_DIR / 'TABuddy/utils/inference_model'))
SYSTEM_PROMPT = os.getenv('SYSTEM_PROMPT', str(BASE_DIR / 'Datacollector/utils/prompts/dpo_sys_prompt.txt'))
TASK_PROMPT = os.getenv('TASK_PROMPT', str(BASE_DIR / 'Datacollector/utils/prompts/task.txt'))

# Dataset Paths
TEST_PATH = os.getenv('TEST_PATH', str(BASE_DIR / 'Datacollector/utils/Retraining_datasets/test.jsonl'))
TRAIN_PATH = os.getenv('TRAIN_PATH', str(BASE_DIR / 'Datacollector/utils/Retraining_datasets/train.jsonl'))
EVAL_PATH = os.getenv('EVAL_PATH', str(BASE_DIR / 'Datacollector/utils/Retraining_datasets/eval.jsonl'))
DATA_FILE_PATH = os.getenv('DATA_FILE_PATH', str(BASE_DIR / 'Datacollector/utils/Retraining_datasets/data.jsonl'))
OUTPUT_PATH = os.getenv('OUTPUT_PATH', str(BASE_DIR / 'retraining_models'))

# Model Directory Map
MODEL_DIRECTORY_MAP = {
    "7b": os.getenv('MODEL_7B_PATH', str(BASE_DIR / 'base_models/CodeLlama-7b-Instruct-hf')),
}

# Static files
STATIC_URL = 'static/'
STATIC_ROOT = os.getenv('STATIC_ROOT', str(BASE_DIR / 'staticfiles'))